// PASSED ID 68551835

/**
 * -- ПРИНЦИП РАБОТЫ --
 * Для поиска используется модифицированная версия бинарного поиска.
 * Так как изначальный массив отсортирован, но сдвинут, тогда следует что, если разделить массив попалам,
 * то одна из половин должна быть отсортирована.
 * Теперь нужно определить какая из. Для этого сравним самый левый элемент со средним. Если он меньше значит
 * левая часть массива отсортирована, иначе отсортирована правая. Идем в отсортированную часть и проверяем, находится
 * ли запрошенный элемент между границами этой части. Если да, то "делим" массив попалам, если нет, значит элемент
 * потенциально может быть в неотсортированной части, значит идем в нее: тоже "делим" попалам.
 * Повторяем действия, пока левая граница не больше правой
 *
 * -- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
 * При "делении" массива попалам, одна из частей должна быть отсортирована, а поиск (бинарный) происходит
 * как раз таки в отсортированной. При этом границы всегда сужаются и в конечном счете, мы либо найдем элемент,
 * либо убедимся, что такого элемента нет
 *
 * -- ВРЕМЕННАЯ СЛОЖНОСТЬ --
 * Time: O(log(N)); Space: O(1).
 * Я еще сделал на рекурсии, но у меня не принимается Make компилятор, там Time: O(log(N)); Space: O(log(N)).
 */
public class Solution {
    public static int brokenSearch(int[] arr, int k) {
        int leftIdx = 0;
        int rightIdx = arr.length - 1;
        while (leftIdx <= rightIdx) {
            final int mid = (rightIdx + leftIdx) / 2;
            final int midNum = arr[mid];
            final int leftNum = arr[leftIdx];
            final int rightNum = arr[rightIdx];
            if (midNum == k) {
                return mid;
            }
            if (leftNum <= midNum) {
                if (k >= leftNum && k < midNum) {
                    rightIdx = mid - 1;
                } else {
                    leftIdx = mid + 1;
                }
            } else {
                if (k <= rightNum && k > midNum) {
                    leftIdx = mid + 1;
                } else {
                    rightIdx = mid - 1;
                }
            }
        }
        return -1;
    }
}

